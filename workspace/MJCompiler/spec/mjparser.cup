package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

// import java.io.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:
    
    boolean errorDetected = false;
    
    Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
        errorDetected = true;
        StringBuilder msg = new StringBuilder(message); 
        if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
        StringBuilder msg = new StringBuilder(message); 
        if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}

scan with {:
    Symbol s = this.getScanner().next_token();
    if (s != null && s.value != null) 
        log.info(s.toString() + " " + s.value.toString());
    return s;
:}

terminal PROG, LBRACE, RBRACE, SEMI, LPAREN, RPAREN, COMMA, PRINT, RETURN, PLUS, EQUAL, VOID, CONST, ASSIGN;
terminal Integer NUMBER;
terminal String IDENT;
terminal Boolean BOOL;
terminal Character CHARACTER;
terminal IF, ELSE;

terminal NOT_EQUALS, GREATER, GREATER_EQUALS, LESS, LESS_EQUALS, AND, OR, INCREMENT, DECREMENT, COLON, DOT, LBRACKET, RBRACKET;
terminal CONTINUE, BREAK, CLASS, DO, EXTENDS, INTERFACE, MAP, NEW, READ, UNION, WHILE;
terminal CHAR, MINUS, DIV, EQUALS, MOD, MUL;

nonterminal MethodDeclList, Constant, VarDecl, VarDeclMore;
nonterminal FormalParamList, FormalParamDecl, FormPars, ActualPars, ActualParamList; 
nonterminal StatementList, Statement, Addop;
nonterminal Unmatched, Matched;
nonterminal Label, Assignop, Mulop, Setop, Relop, AddopTerm, AddopTermList, CondFact, CondTerm, Condition, ActPars, DesignatorStatement;
nonterminal MethodSigniture;
nonterminal ClassDecl, ExtendsType, InterfaceMethodList, InterfaceDecl, ProgramDecl, ConstDecl, ConstDeclList;
nonterminal VarDeclarations;

nonterminal rs.etf.pp1.symboltable.concepts.Obj Program, ProgName, Designator, MethodDecl, MethodTypeName; 
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Term, Expr, Factor, VarDeclList; 


precedence left PLUS, MINUS;
precedence left MUL, DIV, MOD;


Program ::= (Program_base) PROG IDENT:programName ProgramDecl LBRACE MethodDeclList RBRACE 
;

ProgramDecl ::= (ProgramDecl_Const) ProgramDecl ConstDecl
                |
                (ProgramDecl_var) ProgramDecl VarDecl
                |
                (PgoramDecl_class) ProgramDecl ClassDecl
                |
                (ProgramDecl_interface) ProgramDecl InterfaceDecl
                |
                (ProgramDecl_epsilon) /* epsilon */
                ;

ProgName ::= (ProgName_base) IDENT:pName 
;

VarDecl ::= (VarDecl_base) Type IDENT VarDeclList SEMI
            |
            (VarDecl_brackets) Type IDENT LBRACKET RBRACKET VarDeclList SEMI
;

VarDeclList ::= (VarDeclList_base) VarDeclList COMMA IDENT
                |
                (VarDeclList_bracket) VarDeclList COMMA IDENT LBRACKET RBRACKET
                |
                (VarDeclList_epsilon) /* epsilon */
;

VarDeclarations ::= (VarDeclarations_base) VarDeclarations VarDecl
                    |
                    (VarDeclarations_epsilon) /* epsilon */
                    ;


ConstDecl ::= (ConstDecl_base) CONST Type IDENT EQUAL Constant ConstDeclList SEMI;

ConstDeclList ::= (ConstDeclList_base) COMMA IDENT EQUAL Constant
                |
                (ConstDeclList_epsilon) /* epsilon */
;

Constant ::= (Constant_number) NUMBER
            |
            (Constant_character) CHAR
            |
            (Constant_boolean) BOOL
;

Type ::= (Type) IDENT:typeName 
;

MethodDeclList ::= (MethodDeclarations) MethodDeclList MethodDecl
                    |
                    (NoMethodDecl)/* epsilon */
                    ;

MethodDecl ::= (MethodDecl) MethodSigniture VarDeclarations LBRACE StatementList RBRACE;

MethodTypeName ::= (MethodTypeName) Type:retType IDENT:methName
;

MethodSigniture ::= (MethodSigniture_Type_FormPars) Type IDENT LPAREN FormPars RPAREN
                    |
                    (MethodSigniture_Void_FormPars) VOID IDENT LPAREN FormPars RPAREN
;


FormPars ::= (FormParams) FormalParamList 
            | 
            (NoFormParam) /* epsilon */ ;

FormalParamList ::= (FormalParamDecls) FormalParamList COMMA FormalParamDecl
                    |
                    (SingleFormalParamDecl) FormalParamDecl
                    ;
                    
FormalParamDecl ::= (FormalParamDecl_base) Type IDENT 
                    |
                    (FormalParamDecl_brakcet) Type IDENT LBRACKET RBRACKET
                    ;

StatementList ::= (Statements) StatementList Statement 
                    |
                  (NoStmt) /* epsilon */
                  ;

Statement ::= (MatchedStmt) Matched | (UnmachedStmt) Unmatched ;

Unmatched ::=   (UnmatchedIf) IF LPAREN Condition RPAREN Statement 
                | 
                (UnmatchedIfElse) IF LPAREN Condition RPAREN Matched ELSE Unmatched;
    
                  
Matched ::= (ErrAssignment) Designator EQUAL error SEMI
              {: parser.log.debug("Uspesan oporavak od greske pri dodeli vrednosti."); :}
              |
              (ReturnExpr) RETURN Expr:t SEMI
              |
              (ReturnNoExpr) RETURN SEMI
              | 
              (ContinueExpr) CONTINUE SEMI
              |
              (BreakStmt) BREAK SEMI
              |
              (ReadStmt) READ LPAREN Designator RPAREN SEMI
              | 
              (PrintStmt_1) PRINT LPAREN Expr RPAREN SEMI
              |
              (PrintStmt_2) PRINT LPAREN Expr COMMA NUMBER RPAREN SEMI
              |
              (DesignatorStmt) DesignatorStatement SEMI
              | 
              (BraceStmt) LBRACE StatementList RBRACE
              |
              (DoWhileStmt_1) DO Statement WHILE LPAREN RPAREN SEMI
              |
              (DoWhileStmt_2) DO Statement WHILE LPAREN Condition RPAREN SEMI
              |
              (DoWhileStmt_3) DO Statement WHILE LPAREN Condition COMMA DesignatorStatement RPAREN SEMI
              |
              (MatchedIf) IF LPAREN Condition RPAREN Matched ELSE Matched
            ;


DesignatorStatement ::= (DesignatorStatement_des1) Designator Assignop Designator Setop Designator
                    |
                    (DesignatorStatement_des2) Designator Assignop Expr
                    |
                    (DesignatorStatement_des3) Designator LPAREN ActPars RPAREN
                    |
                    (DesignatorStatement_zagrade) Designator LPAREN RPAREN
                    |
                    (DesignatorStatement_des4) Designator INCREMENT
                    |
                    (DesignatorStatement_des5) Designator DECREMENT
;

ActPars ::= (ActPars_base) Expr
            |
            (ActPars_rec) ActPars COMMA Expr
            ;

Condition ::= (Condition_base) CondTerm
            |
            (Condition_rec) Condition OR CondTerm
;

CondTerm ::= (CondTerm_base) CondFact
            |
            (CondTerm_rec) CondTerm AND CondFact
;

CondFact ::= (CondFact_Expr) Expr
            |
            (CondFact_Expr_relop) Expr Relop Expr
        ;


Expr ::= (UnaryMinusExpr) MINUS Term:t AddopTermList
       |
       (TermExpr) Term:t AddopTermList
       |
       (MapExpr) Designator:source MAP Designator:target
       ;


AddopTermList ::= (AddopTermList_base) AddopTermList Addop Term
                |
                (AddopTermList_epsilon) /* epsilon */
                ;

AddopTerm ::= (AddopTerm_base) Addop Term
            |
            (AddopTerm_epsilon) /* epsilon */
;

Term ::=  (Term_factor) Factor:t
        |
        (Term_mulop) Term Mulop Factor
;


Factor ::= (Factor_const) Constant
            |
           (Factor_var) Designator:d
            |
           (Factor_funccall) Designator:func LPAREN ActualPars RPAREN
            |
           (Factor_NewType_Epxr) NEW Type LBRACKET Expr RBRACKET
           |
           (Factor_NewType_ActualPars) NEW Type LPAREN ActualPars RPAREN
           |
           (Factor_Expr) LPAREN Expr RPAREN
           ;

ActualPars ::= (Actuals) ActualParamList 
                | 
               (NoActuals) /* epsilon */ 
               ;
               
ActualParamList ::= (ActualParams) ActualParamList COMMA Expr
                    |
                    (ActualParam) Expr
                    ;

Designator ::= (SimpleDesignator) IDENT:name
             | (FieldAccess) Designator DOT IDENT:field
             | (ArrayAccess) Designator LBRACKET Expr:index RBRACKET
             ;

Label ::= (Label) IDENT ;

Assignop ::= (Assignop) EQUAL ;

Relop ::= (Relop_EQUALS) EQUALS 
        |
        (Relop_NOT_EQUALS) NOT_EQUALS
        |
        (Relop_GREATER) GREATER
        |
        (Relop_GREATER_EQUALS) GREATER_EQUALS
        |
        (Relop_LESS) LESS
        |
        (Relop_LESS_EQUALS) LESS_EQUALS
        ;

Addop ::= (Addop_PLUS) PLUS
        |
        (Addop_MINUS) MINUS
        ;

Mulop ::= (Mulop_MUL) MUL 
        |
        (Mulop_DIV) DIV 
        |
        (Mulop_MOD) MOD 
        ; 

Setop ::= (Setop) UNION ;



ClassDecl ::= (ClassDecl_base) CLASS IDENT ExtendsType LBRACE VarDeclarations RBRACE
              |
              (ClassDecl_methodList) CLASS IDENT ExtendsType LBRACE VarDeclarations
                    LBRACE MethodDeclList RBRACE RBRACE
            ;

ExtendsType ::= (ExtendsType_base) EXTENDS Type
                |
                (ExtendsType_epsilon) /* epsilon */
                ;

InterfaceDecl ::= (InterfaceDecl_base) INTERFACE IDENT LBRACE InterfaceMethodList RBRACE;

InterfaceMethodList ::= (InterfaceMethodList_methodSigniture) InterfaceMethodList MethodSigniture SEMI
                        |
                        (InterfaceMethodList_MethodDecl) InterfaceMethodList MethodDecl
                        |
                        (InterfaceMethodList_epsilon) /* epsilon*/
                        ;