package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

// import java.io.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:
    
    boolean errorDetected = false;
    
    Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
        errorDetected = true;
        StringBuilder msg = new StringBuilder(message); 
        if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
        StringBuilder msg = new StringBuilder(message); 
        if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}

scan with {:
    Symbol s = this.getScanner().next_token();
    if (s != null && s.value != null) 
        log.info(s.toString() + " " + s.value.toString());
    return s;
:}

terminal PROG, LBRACE, RBRACE, SEMI, LPAREN, RPAREN, COMMA, PRINT, RETURN, PLUS, EQUAL, VOID, CONST, ASSIGN;
terminal Integer NUMBER;
terminal String IDENT;
terminal Boolean BOOL;
terminal Character CHAR;
terminal IF, ELSE;

terminal NOT_EQUALS, GREATER, GREATER_EQUALS, LESS, LESS_EQUALS, AND, OR, INCREMENT, DECREMENT, COLON, DOT, LBRACKET, RBRACKET;
terminal CONTINUE, BREAK, CLASS, DO, EXTENDS, INTERFACE, MAP, NEW, READ, UNION, WHILE;
terminal MINUS, DIV, EQUALS, MOD, MUL;

nonterminal MethodDeclList MethodDeclList;
nonterminal Constant Constant;
nonterminal VarDecl VarDecl;
nonterminal VarDeclMore VarDeclMore;
nonterminal FormalParamList FormalParamList;
nonterminal FormalParamDecl FormalParamDecl;
nonterminal FormPars FormPars;
nonterminal ActualPars ActualPars;
nonterminal ActualParamList ActualParamList; 
nonterminal StatementList StatementList;
nonterminal Statement Statement;
nonterminal Addop Addop;
nonterminal Unmatched Unmatched;
nonterminal Matched Matched;
nonterminal Label Label;
nonterminal Assignop Assignop;
nonterminal Mulop Mulop;
nonterminal Setop Setop;
nonterminal Relop Relop;
nonterminal AddopTerm AddopTerm;
nonterminal AddopTermList AddopTermList;
nonterminal CondFact CondFact;
nonterminal CondTerm CondTerm;
nonterminal Condition Condition;
nonterminal ActPars ActPars;
nonterminal DesignatorStatement DesignatorStatement;
nonterminal MethodSigniture MethodSigniture;
nonterminal ClassDecl ClassDecl;
nonterminal ExtendsType ExtendsType;
nonterminal InterfaceMethodList InterfaceMethodList;
nonterminal InterfaceDecl InterfaceDecl;
nonterminal ProgramDecl ProgramDecl;
nonterminal ConstDecl ConstDecl;
nonterminal ConstDeclList ConstDeclList;
nonterminal ConstDeclMore ConstDeclMore;
nonterminal VarDeclListOptional VarDeclListOptional;
nonterminal ProgramName ProgramName;
nonterminal ClassNameDeclaration ClassNameDeclaration;

nonterminal rs.etf.pp1.symboltable.concepts.Struct Factor;
nonterminal rs.etf.pp1.symboltable.concepts.Obj Designator;

nonterminal Program Program;
nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName, MethodDecl, MethodTypeName; 
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Term, Expr, VarDeclList; 


precedence left PLUS, MINUS;
precedence left MUL, DIV, MOD;

start with Program;

Program ::= (Program) PROG ProgramName:P1 ProgramDecl:P2 LBRACE MethodDeclList:M3 RBRACE {: RESULT=new Program(P1, P2, M3); RESULT.setLine(P1left); :}
;


ProgramName ::= (ProgramName) IDENT:I1 {: RESULT=new ProgramName(I1); RESULT.setLine(I1left); :}
;

ProgramDecl ::= (ProgramDecl_Const) ProgramDecl:P1 ConstDeclList:C2 {: RESULT=new ProgramDecl_Const(P1, C2); RESULT.setLine(P1left); :}
                |
                (ProgramDecl_var) ProgramDecl:P1 VarDecl:V2 {: RESULT=new ProgramDecl_var(P1, V2); RESULT.setLine(P1left); :}
                |
                (PgoramDecl_class) ProgramDecl:P1 ClassDecl:C2 {: RESULT=new PgoramDecl_class(P1, C2); RESULT.setLine(P1left); :}
                |
                (ProgramDecl_interface) ProgramDecl:P1 InterfaceDecl:I2 {: RESULT=new ProgramDecl_interface(P1, I2); RESULT.setLine(P1left); :}
                |
                (ProgramDecl_epsilon) {: RESULT=new ProgramDecl_epsilon(); :} /* epsilon */
                ;

VarDeclListOptional ::= (VarDeclListOptional_list) VarDeclList:V1 {: RESULT=new VarDeclListOptional_list(V1); RESULT.setLine(V1left); :}
                        |
                        (VarDeclListOptional_epsilon) {: RESULT=new VarDeclListOptional_epsilon(); :} /* epsilon */
;

VarDeclList ::= (VarDeclList) Type:T1 VarDecl:V2 VarDeclMore:V3 SEMI {: RESULT=new VarDeclList(T1, V2, V3); RESULT.setLine(T1left); :};

VarDecl ::= (VarDecl_regular) IDENT:I1 {: RESULT=new VarDecl_regular(I1); RESULT.setLine(I1left); :} 
            |
            (VarDecl_array) IDENT:I1 LBRACKET RBRACKET {: RESULT=new VarDecl_array(I1); RESULT.setLine(I1left); :}
;

VarDeclMore ::= (VarDeclMore_comma) COMMA VarDecl:V1 VarDeclMore:V2 {: RESULT=new VarDeclMore_comma(V1, V2); RESULT.setLine(V1left); :}
                |
                (VarDeclMore_e) {: RESULT=new VarDeclMore_e(); :} /* epsilon */
;




ConstDeclList ::= (ConstDeclList) CONST Type:T1 ConstDecl:C2 ConstDeclMore:C3 SEMI {: RESULT=new ConstDeclList(T1, C2, C3); RESULT.setLine(T1left); :};

ConstDecl ::= (ConstDecl) IDENT:I1 EQUAL Constant:C2 {: RESULT=new ConstDecl(I1, C2); RESULT.setLine(I1left); :};

ConstDeclMore ::= (ConstDeclMore_base) COMMA ConstDecl:C1 ConstDeclMore:C2 {: RESULT=new ConstDeclMore_base(C1, C2); RESULT.setLine(C1left); :}
                |
                (ConstDeclMore_epsilon) {: RESULT=new ConstDeclMore_epsilon(); :} /* epsilon */
;

Constant ::= (Constant_number) NUMBER:N1 {: RESULT=new Constant_number(N1); RESULT.setLine(N1left); :}
            |
            (Constant_character) CHAR:C1 {: RESULT=new Constant_character(C1); RESULT.setLine(C1left); :}
            |
            (Constant_boolean) BOOL:B1 {: RESULT=new Constant_boolean(B1); RESULT.setLine(B1left); :}
;

Type ::= (Type) IDENT:typeName {: RESULT=new Type(typeName); RESULT.setLine(typeNameleft); :} 
;

MethodDeclList ::= (MethodDeclarations) MethodDeclList:M1 MethodDecl:M2 {: RESULT=new MethodDeclarations(M1, M2); RESULT.setLine(M1left); :}
                    |
                    (NoMethodDecl) {: RESULT=new NoMethodDecl(); :}/* epsilon */
                    ;

MethodDecl ::= (MethodDecl) MethodSigniture:M1 VarDeclListOptional:V2 LBRACE StatementList:S3 RBRACE {: RESULT=new MethodDecl(M1, V2, S3); RESULT.setLine(M1left); :};

MethodTypeName ::= (MethodTypeName) Type:retType IDENT:methName {: RESULT=new MethodTypeName(retType, methName); RESULT.setLine(retTypeleft); :}
;

MethodSigniture ::= (MethodSigniture_Type) Type:T1 IDENT:I2 LPAREN FormPars:F3 RPAREN {: RESULT=new MethodSigniture_Type(T1, I2, F3); RESULT.setLine(T1left); :}
                    |
                    (MethodSigniture_Void) VOID IDENT:I1 LPAREN FormPars:F2 RPAREN {: RESULT=new MethodSigniture_Void(I1, F2); RESULT.setLine(I1left); :}
;


FormPars ::= (FormParams) FormalParamList:F1 {: RESULT=new FormParams(F1); RESULT.setLine(F1left); :} 
            | 
            (NoFormParam) {: RESULT=new NoFormParam(); :} /* epsilon */ ;

FormalParamList ::= (FormalParamDecls) FormalParamList:F1 COMMA FormalParamDecl:F2 {: RESULT=new FormalParamDecls(F1, F2); RESULT.setLine(F1left); :}
                    |
                    (SingleFormalParamDecl) FormalParamDecl:F1 {: RESULT=new SingleFormalParamDecl(F1); RESULT.setLine(F1left); :}
                    ;
                    
FormalParamDecl ::= (FormalParamDecl_base) Type:T1 IDENT:I2 {: RESULT=new FormalParamDecl_base(T1, I2); RESULT.setLine(T1left); :} 
                    |
                    (FormalParamDecl_brakcet) Type:T1 IDENT:I2 LBRACKET RBRACKET {: RESULT=new FormalParamDecl_brakcet(T1, I2); RESULT.setLine(T1left); :}
                    ;

StatementList ::= (Statements) StatementList:S1 Statement:S2 {: RESULT=new Statements(S1, S2); RESULT.setLine(S1left); :} 
                    |
                  (NoStmt) {: RESULT=new NoStmt(); :} /* epsilon */
                  ;

Statement ::= (MatchedStmt) Matched:M1 {: RESULT=new MatchedStmt(M1); RESULT.setLine(M1left); :} | (UnmachedStmt) Unmatched:U1 {: RESULT=new UnmachedStmt(U1); RESULT.setLine(U1left); :} ;

Unmatched ::=   (UnmatchedIf) IF LPAREN Condition:C1 RPAREN Statement:S2 {: RESULT=new UnmatchedIf(C1, S2); RESULT.setLine(C1left); :} 
                | 
                (UnmatchedIfElse) IF LPAREN Condition:C1 RPAREN Matched:M2 ELSE Unmatched:U3 {: RESULT=new UnmatchedIfElse(C1, M2, U3); RESULT.setLine(C1left); :};
    
                  
Matched ::= (ErrAssignment) Designator:D1 EQUAL error SEMI {: RESULT=new ErrAssignment(D1); RESULT.setLine(D1left); :}
              |
              (ReturnExpr) RETURN Expr:t SEMI {: RESULT=new ReturnExpr(t); RESULT.setLine(tleft); :}
              |
              (ReturnNoExpr) RETURN SEMI {: RESULT=new ReturnNoExpr(); :}
              | 
              (ContinueExpr) CONTINUE SEMI {: RESULT=new ContinueExpr(); :}
              |
              (BreakStmt) BREAK SEMI {: RESULT=new BreakStmt(); :}
              |
              (ReadStmt) READ LPAREN Designator:D1 RPAREN SEMI {: RESULT=new ReadStmt(D1); RESULT.setLine(D1left); :}
              | 
              (PrintStmt_1) PRINT LPAREN Expr:E1 RPAREN SEMI {: RESULT=new PrintStmt_1(E1); RESULT.setLine(E1left); :}
              |
              (PrintStmt_2) PRINT LPAREN Expr:E1 COMMA NUMBER:N2 RPAREN SEMI {: RESULT=new PrintStmt_2(E1, N2); RESULT.setLine(E1left); :}
              |
              (DesignatorStmt) DesignatorStatement:D1 SEMI {: RESULT=new DesignatorStmt(D1); RESULT.setLine(D1left); :}
              | 
              (BraceStmt) LBRACE StatementList:S1 RBRACE {: RESULT=new BraceStmt(S1); RESULT.setLine(S1left); :}
              |
              (DoWhileStmt_1) DO Statement:S1 WHILE LPAREN RPAREN SEMI {: RESULT=new DoWhileStmt_1(S1); RESULT.setLine(S1left); :}
              |
              (DoWhileStmt_2) DO Statement:S1 WHILE LPAREN Condition:C2 RPAREN SEMI {: RESULT=new DoWhileStmt_2(S1, C2); RESULT.setLine(S1left); :}
              |
              (DoWhileStmt_3) DO Statement:S1 WHILE LPAREN Condition:C2 COMMA DesignatorStatement:D3 RPAREN SEMI {: RESULT=new DoWhileStmt_3(S1, C2, D3); RESULT.setLine(S1left); :}
              |
              (MatchedIf) IF LPAREN Condition:C1 RPAREN Matched:M2 ELSE Matched:M3 {: RESULT=new MatchedIf(C1, M2, M3); RESULT.setLine(C1left); :}
            ;


DesignatorStatement ::= (DesignatorStatement_des1) Designator:D1 Assignop:A2 Designator:D3 Setop:S4 Designator:D5 {: RESULT=new DesignatorStatement_des1(D1, A2, D3, S4, D5); RESULT.setLine(D1left); :}
                    |
                    (DesignatorStatement_des2) Designator:D1 Assignop:A2 Expr:E3 {: RESULT=new DesignatorStatement_des2(D1, A2, E3); RESULT.setLine(D1left); :}
                    |
                    (DesignatorStatement_des3) Designator:D1 LPAREN ActPars:A2 RPAREN {: RESULT=new DesignatorStatement_des3(D1, A2); RESULT.setLine(D1left); :}
                    |
                    (DesignatorStatement_zagrade) Designator:D1 LPAREN RPAREN {: RESULT=new DesignatorStatement_zagrade(D1); RESULT.setLine(D1left); :}
                    |
                    (DesignatorStatement_des4) Designator:D1 INCREMENT {: RESULT=new DesignatorStatement_des4(D1); RESULT.setLine(D1left); :}
                    |
                    (DesignatorStatement_des5) Designator:D1 DECREMENT {: RESULT=new DesignatorStatement_des5(D1); RESULT.setLine(D1left); :}
;

ActPars ::= (ActPars_base) Expr:E1 {: RESULT=new ActPars_base(E1); RESULT.setLine(E1left); :}
            |
            (ActPars_rec) ActPars:A1 COMMA Expr:E2 {: RESULT=new ActPars_rec(A1, E2); RESULT.setLine(A1left); :}
            ;

Condition ::= (Condition_base) CondTerm:C1 {: RESULT=new Condition_base(C1); RESULT.setLine(C1left); :}
            |
            (Condition_rec) Condition:C1 OR CondTerm:C2 {: RESULT=new Condition_rec(C1, C2); RESULT.setLine(C1left); :}
;

CondTerm ::= (CondTerm_base) CondFact:C1 {: RESULT=new CondTerm_base(C1); RESULT.setLine(C1left); :}
            |
            (CondTerm_rec) CondTerm:C1 AND CondFact:C2 {: RESULT=new CondTerm_rec(C1, C2); RESULT.setLine(C1left); :}
;

CondFact ::= (CondFact_Expr) Expr:E1 {: RESULT=new CondFact_Expr(E1); RESULT.setLine(E1left); :}
            |
            (CondFact_Expr_relop) Expr:E1 Relop:R2 Expr:E3 {: RESULT=new CondFact_Expr_relop(E1, R2, E3); RESULT.setLine(E1left); :}
        ;


Expr ::= (UnaryMinusExpr) MINUS Term:t AddopTermList:A1 {: RESULT=new UnaryMinusExpr(t, A1); RESULT.setLine(tleft); :}
       |
       (TermExpr) Term:t AddopTermList:A1 {: RESULT=new TermExpr(t, A1); RESULT.setLine(tleft); :}
       |
       (MapExpr) Designator:source MAP Designator:target {: RESULT=new MapExpr(source, target); RESULT.setLine(sourceleft); :}
       ;


AddopTermList ::= (AddopTermList_base) AddopTermList:A1 Addop:A2 Term:T3 {: RESULT=new AddopTermList_base(A1, A2, T3); RESULT.setLine(A1left); :}
                |
                (AddopTermList_epsilon) {: RESULT=new AddopTermList_epsilon(); :} /* epsilon */
                ;

AddopTerm ::= (AddopTerm_base) Addop:A1 Term:T2 {: RESULT=new AddopTerm_base(A1, T2); RESULT.setLine(A1left); :}
            |
            (AddopTerm_epsilon) {: RESULT=new AddopTerm_epsilon(); :} /* epsilon */
;

Term ::=  (Term_factor) Factor:t {: RESULT=new Term_factor(t); RESULT.setLine(tleft); :}
        |
        (Term_mulop) Term:T1 Mulop:M2 Factor:F3 {: RESULT=new Term_mulop(T1, M2, F3); RESULT.setLine(T1left); :}
;


Factor ::= (Factor_const) Constant:C1 {: RESULT=new Factor_const(C1); RESULT.setLine(C1left); :}
            |
           (Factor_designator) Designator:d {: RESULT=new Factor_designator(d); RESULT.setLine(dleft); :}
            |
           (Factor_funccall) Designator:func LPAREN ActualPars:A1 RPAREN {: RESULT=new Factor_funccall(func, A1); RESULT.setLine(funcleft); :}
            |
           (Factor_NewType_Epxr) NEW Type:T1 LBRACKET Expr:E2 RBRACKET {: RESULT=new Factor_NewType_Epxr(T1, E2); RESULT.setLine(T1left); :}
           |
           (Factor_NewType_ActualPars) NEW Type:T1 LPAREN ActualPars:A2 RPAREN {: RESULT=new Factor_NewType_ActualPars(T1, A2); RESULT.setLine(T1left); :}
           |
           (Factor_Expr) LPAREN Expr:E1 RPAREN {: RESULT=new Factor_Expr(E1); RESULT.setLine(E1left); :}
           ;

ActualPars ::= (Actuals) ActualParamList:A1 {: RESULT=new Actuals(A1); RESULT.setLine(A1left); :} 
                | 
               (NoActuals) {: RESULT=new NoActuals(); :} /* epsilon */ 
               ;
               
ActualParamList ::= (ActualParams) ActualParamList:A1 COMMA Expr:E2 {: RESULT=new ActualParams(A1, E2); RESULT.setLine(A1left); :}
                    |
                    (ActualParam) Expr:E1 {: RESULT=new ActualParam(E1); RESULT.setLine(E1left); :}
                    ;

Designator ::= (SimpleDesignator) IDENT:name {: RESULT=new SimpleDesignator(name); RESULT.setLine(nameleft); :}
             | (FieldAccess) Designator:D1 DOT IDENT:field {: RESULT=new FieldAccess(D1, field); RESULT.setLine(D1left); :}
             | (ArrayAccess) Designator:D1 LBRACKET Expr:index RBRACKET {: RESULT=new ArrayAccess(D1, index); RESULT.setLine(D1left); :}
             ;

Label ::= (Label) IDENT:I1 {: RESULT=new Label(I1); RESULT.setLine(I1left); :} ;

Assignop ::= (Assignop) EQUAL {: RESULT=new Assignop(); :} ;

Relop ::= (Relop_EQUALS) EQUALS {: RESULT=new Relop_EQUALS(); :} 
        |
        (Relop_NOT_EQUALS) NOT_EQUALS {: RESULT=new Relop_NOT_EQUALS(); :}
        |
        (Relop_GREATER) GREATER {: RESULT=new Relop_GREATER(); :}
        |
        (Relop_GREATER_EQUALS) GREATER_EQUALS {: RESULT=new Relop_GREATER_EQUALS(); :}
        |
        (Relop_LESS) LESS {: RESULT=new Relop_LESS(); :}
        |
        (Relop_LESS_EQUALS) LESS_EQUALS {: RESULT=new Relop_LESS_EQUALS(); :}
        ;

Addop ::= (Addop_PLUS) PLUS {: RESULT=new Addop_PLUS(); :}
        |
        (Addop_MINUS) MINUS {: RESULT=new Addop_MINUS(); :}
        ;

Mulop ::= (Mulop_MUL) MUL {: RESULT=new Mulop_MUL(); :} 
        |
        (Mulop_DIV) DIV {: RESULT=new Mulop_DIV(); :} 
        |
        (Mulop_MOD) MOD {: RESULT=new Mulop_MOD(); :} 
        ; 

Setop ::= (Setop) UNION {: RESULT=new Setop(); :} ;



ClassDecl ::= (ClassDecl_base) ClassNameDeclaration:C1 LBRACE VarDeclListOptional:V2 RBRACE {: RESULT=new ClassDecl_base(C1, V2); RESULT.setLine(C1left); :}
              |
              (ClassDecl_methodList) ClassNameDeclaration:C1 LBRACE VarDeclListOptional:V2
                    LBRACE MethodDeclList:M3 RBRACE RBRACE {: RESULT=new ClassDecl_methodList(C1, V2, M3); RESULT.setLine(C1left); :}
            ;

ClassNameDeclaration ::= (ClassNameDeclaration) CLASS IDENT:I1 ExtendsType:E2 {: RESULT=new ClassNameDeclaration(I1, E2); RESULT.setLine(I1left); :};

ExtendsType ::= (ExtendsType_base) EXTENDS Type:T1 {: RESULT=new ExtendsType_base(T1); RESULT.setLine(T1left); :}
                |
                (ExtendsType_epsilon) {: RESULT=new ExtendsType_epsilon(); :} /* epsilon */
                ;

InterfaceDecl ::= (InterfaceDecl_base) INTERFACE IDENT:I1 LBRACE InterfaceMethodList:I2 RBRACE {: RESULT=new InterfaceDecl_base(I1, I2); RESULT.setLine(I1left); :};

InterfaceMethodList ::= (InterfaceMethodList_methodSigniture) InterfaceMethodList:I1 MethodSigniture:M2 SEMI {: RESULT=new InterfaceMethodList_methodSigniture(I1, M2); RESULT.setLine(I1left); :}
                        |
                        (InterfaceMethodList_MethodDecl) InterfaceMethodList:I1 MethodDecl:M2 {: RESULT=new InterfaceMethodList_MethodDecl(I1, M2); RESULT.setLine(I1left); :}
                        |
                        (InterfaceMethodList_epsilon) {: RESULT=new InterfaceMethodList_epsilon(); :} /* epsilon*/
                        ;